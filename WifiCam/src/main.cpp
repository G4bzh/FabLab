/* Need Base64 library by Arturo Guadalupi */

#include <Arduino.h>
#include <Base64.h>
#include <SoftwareSerial.h>
#include <atESP.h>

#define WAIT 200

SoftwareSerial ESPSerial(3, 4); // RX | TX
char c;


void setup()
{
    Serial.begin(9600);
    while (!Serial) {
      ; // wait for serial port to connect. Needed for native USB port only
    }
    Serial.println("Arduino is ready");

    ESPSerial.begin(9600);
    while (!ESPSerial) {
      ; // wait for serial port to connect. Needed for native USB port only
    }
    Serial.println("ESP is ready");

    char ip[16];
    //atESP_setCWJAP(&ESPSerial, "Backoffice", "back4cyim");
    atESP_setCWJAP(&ESPSerial, "NETGEAR", "fablab35320");
    atESP_getCIFSR(&ESPSerial, ip);
    Serial.print("Got IP: ");
    Serial.println(ip);
    atESP_setCIPMODE(&ESPSerial,atESP_NORMAL);
    if ( atESP_setCIPSTART(&ESPSerial,"TCP","192.168.0.40",5000) == EXIT_SUCCESS )
    {
      char buffer[64];
      const char* msg = "1234567890123456789012345678901234567890123456789012345678901234";
      int n=67;

      int i,j,d,r;
      //const char* msg = "\x00\x00\x01\x00\x01\x00\x01\x01\x00\x00\x01\x00\x18\x00\x30\x00\x00\x00\x16\x00\x00\x00\x28\x00\x00\x00\x01\x00\x00\x00\x02\x00\x00\x00\x01\x00\x18\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\x00\x00";
      //const char* msg = "\x00\x00\x01\x00\x01\x00\x10\x10\x00\x00\x01\x00\x20\x00\x28\x04\x00\x00\x16\x00\x00\x00\x28\x00\x00\x00\x10\x00\x00\x00\x20\x00\x00\x00\x01\x00\x20\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xae\xc5\xfe\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\xff\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";

      d = n/64;
      r = n%64;


      atESP_sendData64(&ESPSerial, "+++", 3, "64.txt");
      atESP_sendData64(&ESPSerial, msg, 64, "64.txt");

      // for(i=0;i<d;i++)
      // {
      //
      //   for(j=0;j<64;j++)
      //   {
      //     buffer[j]=msg[64*i+j];
      //   }
      //   atESP_sendData64(&ESPSerial, buffer, 64, "64.txt");
      //
      // }

      // for(j=0;j<r;j++)
      // {
      //   buffer[j]=msg[64*i+j];
      // }
      // atESP_sendData64(&ESPSerial, buffer, r, "64.txt");


      atESP_setCIPCLOSE(&ESPSerial);
    }
    else
    {
      Serial.println("Unable to connect to server");
    }
}

void loop()
{

  if (ESPSerial.available())
  {
     c = ESPSerial.read();
     Serial.write(c);
  }
  if (Serial.available())
  {
     c =  Serial.read();
     ESPSerial.write(c);
  }

}
